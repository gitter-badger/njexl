import 'java.lang.System.out' as out
// a class demo 
def MyClass{
    // static constructor 
    def __class__(){
       me.x = 42
    }
    // one static method : note implicit *me*
    def static_method1(){
       out:printf("(m1) before subtracting %s\n", me.x)
       me.x -= 24 // static variable 
       out:printf("(m1) after subtracting %s\n", me.x)
    }
    // another static method 2
    def static_method2(){
       out:printf("(m2) before adding  %s\n", me.x)
       me.x += 24
       out:printf("(m2) after adding %s, now calling m1 again\n", me.x)
       me:static_method1()
    }
    // another static method 3
    def static_method3(){
       out:printf("(m3) before adding %s\n", me.x)
       me.x += 12
       out:printf("(m3) after adding %s\n", me.x)
    }
    // now showing how to call static 
    // from instance method
    def instance_method(me){
       out:printf ( "My static 'x' has value %s \n", me.$.x )
       // call static method?
       me.$.static_method1() 
    } 
}
// call one in namespace form 
MyClass:static_method1()
// another 
MyClass:static_method2()
// in variable form 
MyClass.static_method1()
// in the field form
m3 = MyClass.static_method3
// call the method
m3()
ci = new('MyClass')
ci.instance_method()
// see it works 
MyClass.x += 60
out:printf("Final result is %d\n", MyClass.x)
MyClass.x

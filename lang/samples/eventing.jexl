/*
 Showcases Eventing.
 The crucial methods are __before__ and __after__
*/

def generic(){
   write("I am generic function")
}
def gen_event(){
   event = __args__[0]
   write("I am generic %s \n", event )
}
def  MyEventClass {
     //  before hook
     def __before__(){
         write("Before : %s\n", list( __args__ ) )
     }
     // after hook 
     def __after__(){
         write("After : %s\n", list( __args__ ) )        
     }
     // define a standard function 
     def say_hello(){
        write("Hello : %s\n", list( __args__ ) )
     }
}
x = new ( 'MyEventClass' )
// get the say_hello method : $ is the NClass of an instance 
m = x.$.methods.say_hello
write(m)
// this get's the method 
e = #def( 'my:gen_event' )
write(e)
m.before.add(e)
// before this method __before__ would be called 
@@x.say_hello(" I am Eventing ")
// __after__ would be called after this 
m_exists = #def( 'my:generic' )
write(m_exists)
// add before handler 
m.before.add(e)
// call and see what happens ?
generic()
// remove before handler 
m.before.remove(e)
// add a programmatic handler with MyEventClass
// __before__ would be called 
m.before.add(x)
// add to after 
m.after.add(e)
// call and see what happens ?
generic()

/*
* Copyright 2016 Nabarun Mondal
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*/

options
{
   MULTI=true;
   STATIC=false;
   VISITOR=true;
   NODE_SCOPE_HOOK=true;
   NODE_CLASS="JexlNode";
   UNICODE_INPUT=true;
   TRACK_TOKENS=true;
}

PARSER_BEGIN(Parser)

package com.noga.njexl.lang.parser;

import java.io.Reader;
import com.noga.njexl.lang.JexlInfo;

public class Parser extends JexlParser
{
    public boolean ALLOW_REGISTERS = false;

    public ASTJexlScript parse(Reader reader, JexlInfo info)
        throws ParseException {
        /*
         * If registers are allowed, the default parser state has to be REGISTERS.
         */
        if (ALLOW_REGISTERS) {
            token_source.defaultLexState = REGISTERS;
        }
        ReInit(reader);
        /*
         *  lets do the 'Unique Init' in here to be
         *  safe - it's a pain to remember
         */

        ASTJexlScript tree = JexlScript();
        tree.value = info;
        return tree;
    }

}

PARSER_END(Parser)


/***************************************
 *     Skip & Number literal tokens
 ***************************************/

<*> SKIP : /* WHITE SPACE */
{
      <"##" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
    | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
    | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")? >
    | " "
    | "\t"
    | "\f"
    | < "\\" ("\n" | "\r" | "\r\n") > /* ignore line : continue on next line  */
}

<*> TOKEN : /* KEYWORDS */
{
      < IF : "if" >
    | < ELSE : ( (" "|"\t")* ( "\n" | "\r" | "\r\n" ) )* ( "else" ) ( (" "|"\t")* ( "\n" | "\r" | "\r\n" ) )* >
    | < FOR : "for" >
    | < FOREACH : "foreach" >
    | < WHILE : "while" >
    | < WHERE : "where" >
    | < NEW : "new" >
    | < VAR : "var" >
    | < EMPTY : "empty" >
    | < SIZE : "size" >
    | < DEFINED : "#def" > /* This is to check if any variable is already defined or not */
    | < NULL : "null" >
    | < TRUE : "true" >
    | < FALSE : "false" >
    | < BREAK : "break" >
    | < CONTINUE : "continue" >
    | < RETURN : "return" >
    | < DEF : "def" >
    | < IMPORT : "import" >
    | < GOTO : "goto" >
    | < AS : "as" >
    | < ATOMIC : "#atomic" > /* To ensure that the code block stays atomic */
    | < CLOCK : "#clock" > /* To benchmark a block */
}


<*> TOKEN : { /* SEPARATORS */
      < LPAREN : "(" >
    | < RPAREN : ")" >
    | < LCURLY : "{" >
    | < RCURLY : "}" >
    | < LBRACKET : "[" >
    | < RBRACKET : "]" >
    | < SEMICOL : ";" >
    | < COLON : ":" >
    | < COMMA : (",")(" "|"\t")* ( "\n" | "\r" | "\r\n" )? >
    | < DOT : "." >
    | <LINE : (" "|"\t")* ( "\n" | "\r" | "\r\n" ) >
    | <LINE_COMMENT : (" "|"\t")* ("##" | "//" ) (~["\n","\r"])* >

}

<*> TOKEN : { /* CONDITIONALS */
      < QMARK : "?" >
    | < ELVIS : "?:" >
    | < NUCO : "??" >
    | < AND : ("&&" | "and" ) (<LINE>)? >
    | < OR : ( "||" | "or" ) (<LINE>)? >
}

<*> TOKEN : { /* COMPARISONS */
      < eq : "==" | "eq" >
    | < aeq : "===" | "aeq" >
    | < ne : "!=" | "ne" >
    | < req : "=~" >
    | < rne : "!~" >
    | < gt : ">" | "gt" >
    | < ge : ">=" | "ge" >
    | < lt : "<" | "lt" >
    | < le : "<=" | "le" >
    | < in : "@" >
    | < isa : "isa" >
    | < start_with : "#^"  >
    | < end_with : "#$"  >
    | < in_order : "#@" >
}

<*> TOKEN : { /* OPERATORS */
      < assign : "=" >
    | < mod : "%" | "mod" >
    | < div : "/" | "div" >
    | < not : "!" | "not" >
    | < plus : "+" (<LINE>)? >
    | < minus : "-" (<LINE>)? >
    | < plusa : "+=" >
    | < minusa : "-=" >
    | < mult : "*" >
    | < tilda : "~" >
    | < and : "&" >
    | < or : "|" >
    | < xor : "^" >
    | <hash : "#" >
}

/***************************************
 *     Identifier & String tokens
 ***************************************/

<*> TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER: [ "a"-"z", "A"-"Z", "_", "$", "@" ] >
|
  < #DIGIT: [ "0"-"9"] >
}

<REGISTERS> TOKEN : /* REGISTERS: parser.ALLOW_REGISTER must be set to true before calling parse */
{
  < REGISTER: "#" (["0"-"9"])+ >
}

<*> TOKEN : /* LITERALS */
{
    < INTEGER_LITERAL:
        ( "0" (["0"-"7"])* | ["1"-"9"] (["0"-"9"])* | "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ )
        (["l","L","h","H"])?
    >
 |
  < FLOAT_LITERAL: ((<DIGIT>)+ ".")? (<DIGIT>)+ ((["e","E"])(["+","-"])?(<DIGIT>)+)? (["d","D","f","F","b","B"])? >
}

<*> TOKEN :
{
  < STRING_LITERAL:
        "\"" (~["\"", "\\", "\u2028","\u2029"] | "\\" ~[  "\u2028","\u2029"])* "\""
      |
        "'" (~["'","\\", "\u2028","\u2029"] | "\\" ~[  "\u2028","\u2029"])* "'"
      >
}

<*> TOKEN :
{
   /*
      This is for Currying - See Lambda Calculus
      In essence - we need to replace strings with runtime values and execute them as script!
   */
  < CURRY_LITERAL:
        "`" (~["`","\\", "\u2028","\u2029"] | "\\" ~[  "\u2028","\u2029"])* "`"
  >
}

/***************************************
 *      Statements
 ***************************************/

ASTJexlScript JexlScript() : {}
{
   ( Statement() )* <EOF>
   { return jjtThis;}
}

void Statement() #void : {}
{
    <SEMICOL>
    |( <LINE_COMMENT> )? <LINE>
    | LOOKAHEAD(3) Block()
    | IfStatement()
    | ForeachStatement()
    | WhileStatement()
    | WhereStatement()
    | LOOKAHEAD(2) ExpressionStatement()
    | ReturnStatement()
    | BreakStatement()
    | ContinueStatement()
    | Var()
    | LOOKAHEAD(3) MethodDef()
    | ImportStatement()
    | LOOKAHEAD(3) ClassDef()
    | GoToStatement()
    | LabelledStatement()
    | AtomicStatement()
    | ClockStatement()
}

void GoToStatement() : {}
{
    LOOKAHEAD(4) <GOTO> <hash> Identifier()   Expression()
    |
    LOOKAHEAD(3) <GOTO> <hash> Identifier()

}

void LabelledStatement() : {}
{
    <hash> Identifier() <LINE> Statement()
}

void AtomicStatement() : {}
{
    <ATOMIC> Block()
}

void ClockStatement() : {}
{
    <CLOCK> Block()
}

void BreakStatement() #BreakStatement : {}
{
      LOOKAHEAD(2) <BREAK> <LPAREN> ExpressionStatement() <RPAREN> ( LOOKAHEAD(2) Statement() )?
      |
       <BREAK>
}

void ContinueStatement() #ContinueStatement : {}
{
    LOOKAHEAD(2) <CONTINUE> <LPAREN> ExpressionStatement() <RPAREN> ( LOOKAHEAD(2) Statement() )?
    |
    <CONTINUE>
}


void Block() #Block : {}
{
    <LCURLY> ( Statement() )* <RCURLY>
}

void ImportStatement() : {}
{
    <IMPORT>  StringLiteral()  <AS> Identifier()
}


void ExpressionStatement() #void : {}
{
    Expression() (LOOKAHEAD(1) Expression() #Ambiguous())* (LOOKAHEAD(2) <SEMICOL>)?
}


void IfStatement() : {}
{
    <IF> <LPAREN> Expression() <RPAREN> (LOOKAHEAD(2) <LINE>)? Statement() ( LOOKAHEAD(1) <ELSE> Statement() )?
}


void WhileStatement() : {}
{
    <WHILE> <LPAREN> Expression() <RPAREN> (LOOKAHEAD(2) <LINE>)? Statement()
}

void WhereStatement() : {}
{
    <WHERE> <LPAREN> Expression() <RPAREN> (LOOKAHEAD(2) <LINE>)? Statement()
}

void ForWithIterator() : {}
{
       <FOR> <LPAREN> LValueVar() <COLON>  Expression() <RPAREN> (LOOKAHEAD(2) <LINE>)? Statement()
    |
        <FOREACH> <LPAREN> LValueVar() <COLON>  Expression() <RPAREN> (LOOKAHEAD(2) <LINE>)? Statement()
}

void ExpressionFor() :{}
{
    ( Expression() )?
}

void ForWithCondition() :{}
{
    <FOR> <LPAREN> ExpressionFor() <SEMICOL> ExpressionFor() <SEMICOL> ExpressionFor() <RPAREN>
           (LOOKAHEAD(2) <LINE>)? Statement()
}

void ForeachStatement() : {}
{
      LOOKAHEAD(4)  ForWithIterator()
    |
      ForWithCondition()
}

void ReturnStatement() : {}
{
    <RETURN>  ( LOOKAHEAD(2) Expression() )?
}


/***************************************
 *      Expression syntax
 ***************************************/

void Expression() #void : {}
{
     ConditionalExpression() (LOOKAHEAD(1) <assign>
                     (
                        MethodDef()
                        |
                        Expression()
                      )
                     #Assignment(2) )?
}

void Assignment() #Assignment(2) : {}
{
    ConditionalExpression() <assign> Expression()
}

void Var() #void : {}
{
    <VAR> DeclareVar() (LOOKAHEAD(1) <assign> Expression() #Assignment(2))?
}

void DeclareVar() #Var :
{
    Token t;
}
{
    t=<IDENTIFIER> { declareVariable(jjtThis, t.image); }
}

void LValueVar() #Reference : {}
{
    LOOKAHEAD(1) <VAR> DeclareVar() DotReference()
|
    LOOKAHEAD(1) Identifier(true) DotReference()
}

/**************************
  * Tuple Syntax
  **************************/

void TagContainer() #TagContainer():{}
{
    <COLON> ConditionalExpression()
}

void TupleExpression() #Tuple() :{}
{
  <hash> <LPAREN> ( ConditionalExpression() |  TagContainer() )
          (
             LOOKAHEAD(2)   <COMMA> TagContainer()
          |
             ( <COMMA> ConditionalExpression() )+ ( TagContainer() )?

           )
         <RPAREN>
}

/***************************************
 *      Conditional & relational
 ***************************************/

void ConditionalExpression() #void : {}
{
   LOOKAHEAD(2) TupleExpression()
  |
   ConditionalOrExpression()
  (
    <QMARK> Expression() <COLON> Expression() #TernaryNode(3)
  |
    <ELVIS> Expression() #TernaryNode(2)
  |
    <NUCO> Expression() #NullCoalesce(2)
  )?
}

void ConditionalOrExpression() #void :
{}
{
  ConditionalAndExpression()
  (
    <OR> ConditionalAndExpression() #OrNode(2)
  )*
}

void ConditionalAndExpression() #void :
{}
{
  InclusiveOrExpression()
  (
    <AND> InclusiveOrExpression() #AndNode(2)
  )*
}

void InclusiveOrExpression() #void :
{}
{
  ExclusiveOrExpression()
  ( <or> ExclusiveOrExpression() #BitwiseOrNode(2) )*
}

void ExclusiveOrExpression() #void :
{}
{
  AndExpression()
  ( <xor> AndExpression() #BitwiseXorNode(2) )*
}

void AndExpression() #void :
{}
{
  EqualityExpression()
  ( <and> EqualityExpression() #BitwiseAndNode(2) )*
}

void EqualityExpression() #void :
{}
{
  RelationalExpression()
  (
   <isa> AdditiveExpression() #ISANode(2)
   |
   <in> AdditiveExpression() #INNode(2)
   |
     LOOKAHEAD(2) <aeq> RelationalExpression() #AEQNode(2)
   |
     LOOKAHEAD(2) <start_with> RelationalExpression() #StartWithNode(2)
   |
     LOOKAHEAD(2) <end_with> RelationalExpression() #EndWithNode(2)
   |
     LOOKAHEAD(2) <in_order> RelationalExpression() #InOrderNode(2)
   |
     <eq> RelationalExpression() #EQNode(2)
   |
     <ne> RelationalExpression() #NENode(2)
  )?
}

void RelationalExpression() #void :
{}
{
  AdditiveExpression()
  (
    <lt> AdditiveExpression() #LTNode(2)
   |
    <gt> AdditiveExpression() #GTNode(2)
   |
    <le> AdditiveExpression() #LENode(2)
   |
    <ge> AdditiveExpression() #GENode(2)
   |
    <req> AdditiveExpression() #ERNode(2) // equals regexp
   |
    <rne> AdditiveExpression() #NRNode(2) // not equals regexp
  )?
}

/***************************************
 *      Arithmetic
 ***************************************/

void AdditiveExpression() #AdditiveNode(>1) : {}
{
    MultiplicativeExpression() ( LOOKAHEAD(1) AdditiveOperator() MultiplicativeExpression())*
}

void AdditiveOperator() : {}
{
    <plus> { jjtThis.image = "+"; }
|
    <minus> { jjtThis.image = "-"; }

|
    <plusa>  { jjtThis.image = "+="; }
|
    <minusa> { jjtThis.image = "-="; }

}

void MultiplicativeExpression() #void : {}
{
  UnaryExpression()
  (
    LOOKAHEAD(2) <mult> <mult> UnaryExpression() #PowNode(2)
   |
   <mult> UnaryExpression() #MulNode(2)
   |
    <div> UnaryExpression() #DivNode(2)
   |
    <mod> UnaryExpression() #ModNode(2)
  )*
}

void UnaryExpression() #void : {}
{
    <hash> <or> AdditiveExpression() <or> #UnarySizeNode(1)
|
  <minus> UnaryExpression() #UnaryMinusNode(1)
|
  <tilda> UnaryExpression() #BitwiseComplNode(1)
|
  <not> UnaryExpression() #NotNode(1)
|
  PrimaryExpression()
}


/***************************************
 *      Identifier & Literals
 ***************************************/

void Identifier(boolean top) :
{
    Token t;
}
{
    t=<IDENTIFIER> { jjtThis.image = top? checkVariable(jjtThis, t.image) : t.image; }
|
    t=<REGISTER> { jjtThis.image = t.image; jjtThis.setRegister(t.image); }
}

void StringIdentifier() #Identifier :
{
    Token t;
}
{
  t=<STRING_LITERAL>
  {
    jjtThis.image = Parser.buildString(t.image, true);
  }
}

void Literal() #void :
{
   Token t;
}
{
  IntegerLiteral()
|
  FloatLiteral()
|
  BooleanLiteral()
|
  StringLiteral()
|
  CurryingLiteral()
|
  NullLiteral()
}

void NullLiteral() : {}
{
    <NULL>
}

void BooleanLiteral() #void :
{}
{
  <TRUE> #TrueNode
|
  <FALSE> #FalseNode
}

void IntegerLiteral() #NumberLiteral :
{
  Token t;
}
{
  t=<INTEGER_LITERAL>
  { jjtThis.image = t.image; jjtThis.setNatural(t.image); }
}


void FloatLiteral() #NumberLiteral:
{
  Token t;
}
{
  t=<FLOAT_LITERAL>
  { jjtThis.image = t.image; jjtThis.setReal(t.image); }
}

void StringLiteral() :
{
   Token t;
}
{
  t=<STRING_LITERAL>
  { jjtThis.image = Parser.buildString(t.image, true); }
}

/** Support Currying **/
void CurryingLiteral() :
{
   Token t;
}
{
  t=<CURRY_LITERAL>
  { jjtThis.image = Parser.buildString(t.image, true); }
}

void ArrayRange() : {}
{
   <LBRACKET>  Expression() <COLON> Expression() ( <COLON> Expression() )? <RBRACKET>
}

void ArrayLiteral() : {}
{
  <LBRACKET> (Expression() ( <COMMA> Expression() )*)? <RBRACKET>
}

void MapLiteral() : {}
{
    <LCURLY>
    (
        MapEntry() ( <COMMA> MapEntry() )*
    |
        <COLON>
    ) <RCURLY>
}

void MapEntry() : {}
{
    Expression() <COLON> Expression()
}


/***************************************
 *      Functions & Methods
 ***************************************/

void EmptyFunction() : {}
{
    LOOKAHEAD(3) <EMPTY> <LPAREN> Expression() <RPAREN>
|
    <EMPTY> Reference()
}

void DefinedFunction() : {}
{
    LOOKAHEAD(3) <DEFINED> <LPAREN> Reference() <RPAREN>
|
    <DEFINED> Reference()
}

void SizeFunction() : {}
{
    <SIZE> <LPAREN> Expression() <RPAREN>
}

void Function() #FunctionNode: {}
{
   Identifier() <COLON> Identifier() ( Block() )? <LPAREN>[ ArgDef() ( <COMMA> ArgDef() )* ] <RPAREN>
}

void Method() #MethodNode: {}
{
   Identifier(true) ( Block() )? <LPAREN>[  ArgDef() ( <COMMA> ArgDef() )* ] <RPAREN>
}

void AnyMethod() #void : {}
{
    LOOKAHEAD(<SIZE>) SizeMethod()
  |
    LOOKAHEAD(Identifier() (Block())? <LPAREN>) Method()

}

void SizeMethod() : {}
{
    <SIZE> <LPAREN> <RPAREN>
}

void Constructor() #ConstructorNode() : {}
{
  <NEW> <LPAREN>[ Expression() ( <COMMA> Expression() )* ] <RPAREN>
}


/***************************************
 *     References
 ***************************************/

void PrimaryExpression() #void : {}
{
  LOOKAHEAD(2) Reference()
|
  LOOKAHEAD( <EMPTY> ) EmptyFunction()
|
  LOOKAHEAD( <DEFINED> ) DefinedFunction()
|
  LOOKAHEAD( <SIZE> ) SizeFunction()
|
  LOOKAHEAD( <NEW> <LPAREN> ) Constructor()
|
  LOOKAHEAD( <LCURLY> (Expression())? <COLON> ) MapLiteral()
|
  LOOKAHEAD( <LBRACKET> (Expression() | <RBRACKET>) ) ArrayLiteral()
|
  Literal()
}

void ArrayAccess() : {}
{
    Identifier(true) (LOOKAHEAD(1) <LBRACKET> Expression() <RBRACKET>)+
}

void DotReference() #void : {}
{
  (<DOT>
     ( LOOKAHEAD(Identifier() <LBRACKET> )
         ArrayAccess()
       |
       ( LOOKAHEAD(2)
            AnyMethod()
          |
            Identifier()
          |
            IntegerLiteral()
          |
            StringIdentifier()
       )
     )
  )*
}

void Reference() : {}
{
  (
   LOOKAHEAD(<NEW>) Constructor()
|
   LOOKAHEAD(Identifier() <LBRACKET> ) ArrayAccess()
|
   LOOKAHEAD(Identifier() <COLON> Identifier()  <LPAREN>) Function()
|
   LOOKAHEAD(Identifier() <COLON> Identifier() Block() <LPAREN>) Function()
|
   LOOKAHEAD(Identifier() <LPAREN>) Method()
|
   LOOKAHEAD(Identifier() Block() <LPAREN>) Method()
|
   LOOKAHEAD(<LCURLY>) MapLiteral()
|
   LOOKAHEAD(<LBRACKET> Expression() <COLON>) ArrayRange()
|
   LOOKAHEAD(<LBRACKET>) ArrayLiteral()
|
   LOOKAHEAD( <LPAREN> Expression() ) ReferenceExpression()
|
   StringLiteral()
|
   CurryingLiteral()
|
   Identifier(true)
  )  DotReference()
}

/**
 * ReferenceExpression is a subclass of ArrayAccess
 */
void ReferenceExpression() : {}
{
    <LPAREN> Expression() <RPAREN> (LOOKAHEAD(1) <LBRACKET> Expression() <RBRACKET>)*
}

void ExtendsDef() #ExtendsDef : {}
{
   LOOKAHEAD(2) Identifier() <COLON> Identifier()
   |
   Identifier()
}

void ClassDef() #ClassDef : {}
{
    LOOKAHEAD(3) <DEF>  Identifier()  <COLON>  ExtendsDef() ( <COMMA> ExtendsDef() )*  (<LINE>)? Block()
    |
    <DEF>  Identifier()  (<LINE>)?  Block()
}

void ParamDef() #ParamDef : {}
{
      LOOKAHEAD(3) Identifier()  <assign> MethodDef()
    |
      LOOKAHEAD(2) Identifier()  <assign> Expression()
    |
      Identifier()
}

void ArgDef() #ArgDef : {}
{
       LOOKAHEAD(3) Identifier()  <assign> MethodDef()
    |
       LOOKAHEAD(2) Identifier()  <assign> Expression()
    |
       LOOKAHEAD(1) MethodDef()
    |
       Expression()
}

void MethodDef() #MethodDef : {}
{
    LOOKAHEAD(3) <DEF>  (Identifier())?  <LPAREN>[  ParamDef() ( <COMMA> ParamDef()  )* ] <RPAREN> (<LINE>)? Block()
    |
    <DEF> (Identifier())?  <LPAREN>  <RPAREN>  (<LINE>)? Block()
}


